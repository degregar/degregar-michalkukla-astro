---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Button from '../../components/Button.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import PostPreview from '../../components/PostPreview.astro';
import Subscribe from '../../components/Subscribe.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { slugify } from '../../utils/common-utils';
import TableOfContents from '../../components/TableOfContents.astro';
import { isDifferentDate } from '../../lib/utils';
import Backlinks from '../../components/Backlinks.astro';

export async function getStaticPaths() {
    const posts = (await getCollection('blog')).sort(sortItemsByDateDesc);
    const postCount = posts.length;
    return posts.map((post, index) => ({
        params: { slug: post.slug },
        props: {
            post: {
                ...post,
                ogImage: `/og/blog/${post.slug}.png`
            },
            prevPost: index + 1 !== postCount ? posts[index + 1] : null,
            nextPost: index !== 0 ? posts[index - 1] : null
        }
    }));
}

type Props = { post: CollectionEntry<'blog'>; prevPost: CollectionEntry<'blog'>; nextPost: CollectionEntry<'blog'> };

const { href } = Astro.url;
const { post, prevPost, nextPost } = Astro.props;
const { title, created, updated, excerpt, tags = [], seo, url, description } = post.data;
const { Content, headings } = await post.render();
---

<BaseLayout title={seo?.title ?? title} description={description} image={seo?.image} pageType="article" showHeader={false} ogImage={post.ogImage} ogTitle={post.ogTitle} ogDescription={post.ogDescription} created={created} updated={updated}>
    <article class="mb-16 sm:mb-24">
        <header class="mb-8">
            <h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight">{title}</h1>
            <div class="mt-4 text-sm">
                <FormattedDate date={created} />
                {
                    updated && isDifferentDate(created, updated) && (
                        <>
                            {' '}
                            <span>
                                (zaktualizowane <FormattedDate date={updated} />)
                            </span>
                        </>
                    )
                }

                <div class="mt-4">
                {
                  tags.length > 0 && (
                    <div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
                        {tags.map((tag) => (
                          <a class="text-main hover:underline" href={`/tags/${slugify(tag)}`}>
                              #{tag}
                          </a>
                        ))}
                    </div>
                  )
                }
                </div>
            </div>
        </header>
        <div class="max-w-none prose prose-dante sm:prose-lg">
            {tags.includes("1-sukces-dziennie") && (
                <div class="mb-8 p-4 border-l-4 border-orange-500 bg-orange-50 dark:bg-orange-950 text-orange-950 dark:text-orange-50">
                    <p class="font-bold">To jest wpis z serii <i><a href="/projects/1-sukces-dziennie">1 sukces dziennie</a></i>.</p>
                    <p>W tej serii publikuję codziennie jeden sukces, który osiągnąłem poprzedniego dnia. To praktyczna implementacja podejścia z książki <a href="/blog/show-your-work-austin-kleon">Show Your Work!</a></p>
                    <p>Codziennie zapisuję swoje postępy w <a href="/projects/slowtracker">SlowTracker</a> – aplikacji do zapisywania sukcesów. Następnego dnia rano wybieram jeden lub kilka i tworzę z nich krótki post.</p>
                </div>
            )}

            <TableOfContents headings={headings} />

            <Content />

            {url && (
              <div class="mt-4">
                  Źródło: <a href={url} target="_blank" rel="noopener noreferrer">{url}</a>
              </div>
            )}
        </div>


        <div class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base">
            {
                tags.length > 0 && (
                    <div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
                        {tags.map((tag) => (
                            <a class="text-main hover:underline" href={`/tags/${slugify(tag)}`}>
                                #{tag}
                            </a>
                        ))}
                    </div>
                )
            }
            <Button class="copy-url-button" aria-label="Copy link" data-url={href} data-tooltip-default="Copy link" data-tooltip-success="Skopiowano do schowka">Udostępnij</Button>
        </div>
    </article>

    <Backlinks entry={Astro.props.post as any} />

    {
        (prevPost || nextPost) && (
            <div class="my-16 sm:my-24">
                <h2 class="mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl">Czytaj następny</h2>
                {nextPost && <PostPreview post={nextPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
                {prevPost && <PostPreview post={prevPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
            </div>
        )
    }
    <Subscribe class="my-16 sm:my-24" />
</BaseLayout>

<script>
    document.addEventListener('astro:page-load', () => {
        const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement;
        copyUrlButton?.addEventListener('click', async () => {
            await copyUrl(copyUrlButton);
        });

        async function copyUrl(button: HTMLButtonElement) {
            let url = button.getAttribute('data-url') || '';
            let label = button.innerText;

            await navigator.clipboard.writeText(url);

            button.innerText = 'Skopiowano do schowka';

            setTimeout(() => {
                button.innerText = label;
            }, 2500);
        }
    });
</script>
